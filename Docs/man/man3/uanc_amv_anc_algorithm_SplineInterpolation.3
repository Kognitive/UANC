.TH "uanc::amv::anc::algorithm::QuinticSplines" 3 "Fri Mar 24 2017" "Version 0.1" "UANC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
uanc::amv::anc::algorithm::QuinticSplines \-
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <QuinticSplines\&.h>\fP
.PP
Inherits \fBuanc::amv::anc::algorithm::ANCAlgorithm< model::ANCModel >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::string \fBgetName\fP () final"
.br
.RI "\fIReturns the name of the algorithm\&. \fP"
.ti -1c
.RI "void \fBinvert\fP (std::shared_ptr< \fBInvertedModel\fP > in) final"
.br
.RI "\fIInverts the input signal\&. \fP"
.ti -1c
.RI "\fBAlgorithm\fP * \fBclone\fP () final"
.br
.RI "\fIClones the current instance\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBAlgorithmView\fP< \fBmodel::ANCModel\fP > * \fBconstructView\fP () final"
.br
.RI "\fIConstructs a view, which can handle an ANCModel\&. \fP"
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "\fBAlgorithm\fP* uanc::amv::anc::algorithm::QuinticSplines::clone ()\fC [inline]\fP, \fC [final]\fP, \fC [virtual]\fP"

.PP
Clones the current instance\&. This is basically the prototype pattern\&. It gets used to create an copy of the current \fBInverseDirectAlgorithm\fP\&. To do so it simply creates a new instance\&.
.PP
\fBReturns:\fP
.RS 4
The cloned algorithm\&. 
.RE
.PP

.PP
Implements \fBuanc::amv::IAlgorithm\fP\&.
.SS "\fBAlgorithmView\fP<\fBmodel::ANCModel\fP>* uanc::amv::anc::algorithm::QuinticSplines::constructView ()\fC [inline]\fP, \fC [final]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Constructs a view, which can handle an ANCModel\&. This view basically display the standard information of the algorithm\&.
.PP
\fBReturns:\fP
.RS 4
The created ANCView\&. 
.RE
.PP

.PP
Implements \fBuanc::amv::Algorithm< model::ANCModel >\fP\&.
.SS "std::string uanc::amv::anc::algorithm::QuinticSplines::getName ()\fC [inline]\fP, \fC [final]\fP, \fC [virtual]\fP"

.PP
Returns the name of the algorithm\&. Simply passes back the name of the algorithm\&.
.PP
\fBReturns:\fP
.RS 4
Name of the algorithm 
.RE
.PP

.PP
Implements \fBuanc::amv::IAlgorithm\fP\&.
.SS "void uanc::amv::anc::algorithm::QuinticSplines::invert (std::shared_ptr< \fBInvertedModel\fP > in)\fC [inline]\fP, \fC [final]\fP, \fC [virtual]\fP"

.PP
Inverts the input signal\&. This is actually the heart of an ANC algorithm inside of this application\&. It takes an input model and processes it\&. Besides it should save its data inside the model using \fBgetModel()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The input model containing the original signal\&. 
.RE
.PP

.PP
Implements \fBuanc::amv::anc::algorithm::ANCAlgorithm< model::ANCModel >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for UANC from the source code\&.
